🔌 Spawning anvil …
⏳ Waiting for Anvil RPC at http://127.0.0.1:8545...
✅ Anvil is ready.
🚀 Deploying ArbitrageExecutor …
✅ ArbitrageExecutor deployed to 0x8e45c0936fa1a65bdad3222befec6a03c83372ce
🧪 Running integration tests …
   Compiling ulp1_5 v0.1.0 (/mnt/c/Users/Lenovo/Documents/BUSINESS/QUETZAL COLLECTIVE LLC/ULP/ulp-1.5)
error: attempting to skip non-existent parameter
  --> bot/src/path_optimizer.rs:41:76
   |
41 | #[tracing::instrument(level="trace", skip(snapshot, state_context, config, app_state), fields(pool=%snapshot.pool_address, dex=?snapshot....
   |                                                                            ^^^^^^^^^

error[E0432]: unresolved import `crate::bindings::VelodromeV2Pair`
  --> bot/src/simulation.rs:10:5
   |
10 |     VelodromeV2Pair as VelodromePair, 
   |     ---------------^^^^^^^^^^^^^^^^^
   |     |
   |     no `VelodromeV2Pair` in `bindings`
   |     help: a similar name exists in the module: `VelodromeV2Pool`

error[E0432]: unresolved import `crate::bindings::i_uniswap_v3_pool`
  --> bot/src/state.rs:12:9
   |
12 |         i_uniswap_v3_pool::Slot0Output, // Trying this path
   |         ^^^^^^^^^^^^^^^^^ could not find `i_uniswap_v3_pool` in `bindings`

error[E0433]: failed to resolve: could not find `price_math` in `uniswap_v3_math`
  --> bot/src/path_optimizer.rs:63:30
   |
63 |             uniswap_v3_math::price_math::sqrt_price_x96_to_price(sqrt_price, dec0.into(), dec1.into())?
   |                              ^^^^^^^^^^ could not find `price_math` in `uniswap_v3_math`

error[E0433]: failed to resolve: could not find `price_math` in `uniswap_v3_math`
   --> bot/src/path_optimizer.rs:219:22
    |
219 |     uniswap_v3_math::price_math::sqrt_price_x96_to_price(sqrt_price, dec0.into(), dec1.into())
    |                      ^^^^^^^^^^ could not find `price_math` in `uniswap_v3_math`

warning: unused imports: `ContractError` and `Selector`
  --> bot/src/simulation.rs:18:40
   |
18 |     core::types::{Address, U256, I256, Selector}, 
   |                                        ^^^^^^^^
...
22 |     contract::{ContractError}, // Removed EthCall (unused warning)
   |                ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::error::Error as StdError`
  --> bot/src/simulation.rs:29:5
   |
29 | use std::error::Error as StdError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 1 argument but 8 arguments were supplied
   --> bot/src/event_handler.rs:274:43
    |
274 |     let top_routes: Vec<RouteCandidate> = path_optimizer::find_top_routes(
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: expected `Arc<AppState>`, found `&PoolSnapshot`
   --> bot/src/event_handler.rs:275:9
    |
275 |         &updated_pool_snapshot,    // Arg 1: &PoolSnapshot
    |         ^^^^^^^^^^^^^^^^^^^^^^
    = note: expected struct `Arc<AppState>`
            found reference `&PoolSnapshot`
note: function defined here
   --> bot/src/path_optimizer.rs:95:14
    |
95  | pub async fn find_top_routes(
    |              ^^^^^^^^^^^^^^^
96  |     app_state: Arc<AppState>,
    |     ------------------------
help: remove the extra arguments
    |
275 -         &updated_pool_snapshot,    // Arg 1: &PoolSnapshot
275 +         /* Arc<AppState> */,  // Arg 8: u8
    |

error[E0308]: mismatched types
   --> bot/src/event_handler.rs:274:43
    |
274 |       let top_routes: Vec<RouteCandidate> = path_optimizer::find_top_routes(
    |  _____________________-------------------___^
    | |                     |
    | |                     expected due to this
275 | |         &updated_pool_snapshot,    // Arg 1: &PoolSnapshot
276 | |         &state.pool_states,        // Arg 2: &Arc<DashMap<Address, PoolState>>
277 | |         &state.pool_snapshots,     // Arg 3: &Arc<DashMap<Address, PoolSnapshot>>
...   |
282 | |         config_ref.usdc_decimals,  // Arg 8: u8
283 | |     );
    | |_____^ expected `Vec<RouteCandidate>`, found future
    |
note: calling an async function returns a future
   --> bot/src/event_handler.rs:274:43
    |
274 |       let top_routes: Vec<RouteCandidate> = path_optimizer::find_top_routes(
    |  ___________________________________________^
275 | |         &updated_pool_snapshot,    // Arg 1: &PoolSnapshot
276 | |         &state.pool_states,        // Arg 2: &Arc<DashMap<Address, PoolState>>
277 | |         &state.pool_snapshots,     // Arg 3: &Arc<DashMap<Address, PoolSnapshot>>
...   |
282 | |         config_ref.usdc_decimals,  // Arg 8: u8
283 | |     );
    | |_____^
help: consider `await`ing on the `Future`
    |
283 |     ).await;
    |      ++++++

error[E0308]: mismatched types
  --> bot/src/path_optimizer.rs:57:46
   |
57 |     let t0_is_weth = state_context.token0 == Some(weth_address); // state_context.token0 is Option<Address>
   |                      --------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
   |                      |
   |                      expected because this is `H160`
   |
   = note: expected struct `H160`
                found enum `std::option::Option<H160>`

error[E0308]: mismatched types
  --> bot/src/path_optimizer.rs:76:58
   |
76 |     let usdc_per_weth_price = if state_context.token0 == Some(weth_address) { // If token0 is WETH
   |                                  --------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
   |                                  |
   |                                  expected because this is `H160`
   |
   = note: expected struct `H160`
                found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:110:40
    |
110 |         if !((buy_pool_state.token0 == Some(weth_address) && buy_pool_state.token1 == Some(usdc_address)) ||
    |               ---------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |               |
    |               expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:110:87
    |
110 |         if !((buy_pool_state.token0 == Some(weth_address) && buy_pool_state.token1 == Some(usdc_address)) ||
    |                                                              ---------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                                              |
    |                                                              expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:111:42
    |
111 |                (buy_pool_state.token0 == Some(usdc_address) && buy_pool_state.token1 == Some(weth_address))) {
    |                 ---------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                 |
    |                 expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:111:89
    |
111 |                (buy_pool_state.token0 == Some(usdc_address) && buy_pool_state.token1 == Some(weth_address))) {
    |                                                                ---------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                                                |
    |                                                                expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:123:45
    |
123 |             if !((sell_pool_state.token0 == Some(weth_address) && sell_pool_state.token1 == Some(usdc_address)) ||
    |                   ----------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                   |
    |                   expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:123:93
    |
123 |             if !((sell_pool_state.token0 == Some(weth_address) && sell_pool_state.token1 == Some(usdc_address)) ||
    |                                                                   ----------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                                                   |
    |                                                                   expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:124:47
    |
124 |                    (sell_pool_state.token0 == Some(usdc_address) && sell_pool_state.token1 == Some(weth_address))) {
    |                     ----------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                     |
    |                     expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:124:95
    |
124 |                    (sell_pool_state.token0 == Some(usdc_address) && sell_pool_state.token1 == Some(weth_address))) {
    |                                                                     ----------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                                                     |
    |                                                                     expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:133:59
    |
133 |             let buy_is_t0_weth = buy_pool_state.token0 == Some(weth_address); 
    |                                  ---------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                  |
    |                                  expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:136:61
    |
136 |             let sell_is_t0_usdc = sell_pool_state.token0 == Some(usdc_address); 
    |                                   ----------------------    ^^^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                   |
    |                                   expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/path_optimizer.rs:177:111
    |
177 | ...   match crate::simulation::find_optimal_loan_amount(app_state_clone, client_clone, &route_template, config_clone_for_task).await { 
    |             ------------------------------------------- arguments to this function are incorrect        ^^^^^^^^^^^^^^^^^^^^^ expected `Arc<Config>`, found `Config`
    |
    = note: expected struct `Arc<Config>`
               found struct `Config`
note: function defined here
   --> bot/src/simulation.rs:269:14
    |
269 | pub async fn find_optimal_loan_amount(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
...
273 |     config: Arc<Config>, // Added config back
    |     -------------------
help: call `Into::into` on this expression to convert `Config` into `Arc<Config>`
    |
177 |             match crate::simulation::find_optimal_loan_amount(app_state_clone, client_clone, &route_template, config_clone_for_task.into()).await { 
    |                                                                                                                                    +++++++

error[E0609]: no field `simulation_gas_price_gwei` on type `&Config`
   --> bot/src/simulation.rs:189:37
    |
189 |     let gas_price_gwei = config_ref.simulation_gas_price_gwei.unwrap_or(1.0); 
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `simulation_timeout_seconds` on type `&Config`
   --> bot/src/simulation.rs:224:67
    |
224 |     let gas_est_timeout_duration = Duration::from_secs(config_ref.simulation_timeout_seconds.unwrap_or(10)); 
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `simulation_gas_limit_default` on type `&Config`
   --> bot/src/simulation.rs:235:35
    |
235 |             U256::from(config_ref.simulation_gas_limit_default.unwrap_or(500_000)) 
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `simulation_gas_limit_default` on type `&Config`
   --> bot/src/simulation.rs:240:35
    |
240 |             U256::from(config_ref.simulation_gas_limit_default.unwrap_or(500_000)) 
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `simulation_min_gas_limit` on type `&Config`
   --> bot/src/simulation.rs:246:46
    |
246 |     let min_flashloan_gas_limit = config_ref.simulation_min_gas_limit.unwrap_or(200_000); 
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `local_tests_inject_fake_profit` on type `Arc<Config>`
   --> bot/src/simulation.rs:322:53
    |
322 |     if cfg!(feature = "local_simulation") && config.local_tests_inject_fake_profit.unwrap_or(false) { // Corrected field
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0308]: mismatched types
   --> bot/src/simulation.rs:350:68
    |
350 |         let (reserve_loan, _reserve_other) = if buy_snap.token0 == Some(loan_token) { // buy_snap.token0 is Option<H160>
    |                                                 ---------------    ^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                                                 |
    |                                                 expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0308]: mismatched types
   --> bot/src/simulation.rs:352:38
    |
352 |         } else if buy_snap.token1 == Some(loan_token) { // buy_snap.token1 is Option<H160>
    |                   ---------------    ^^^^^^^^^^^^^^^^ expected `H160`, found `Option<H160>`
    |                   |
    |                   expected because this is `H160`
    |
    = note: expected struct `H160`
                 found enum `std::option::Option<H160>`

error[E0609]: no field `dynamic_sizing_velo_percentage` on type `&Config`
   --> bot/src/simulation.rs:359:39
    |
359 |         let limit_percentage = config.dynamic_sizing_velo_percentage.unwrap_or(10); 
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `test_config_uniswap_fee` on type `Arc<Config>`
   --> bot/src/simulation.rs:456:44
    |
456 |             let fee_u24 = app_state_config.test_config_uniswap_fee.unwrap_or(3000); 
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `test_config_velo_stable` on type `Arc<Config>`
   --> bot/src/simulation.rs:478:43
    |
478 |             let stable = app_state_config.test_config_velo_stable.unwrap_or(false); 
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `test_config_velo_factory` on type `Arc<Config>`
   --> bot/src/simulation.rs:480:52
    |
480 |             let factory_address = app_state_config.test_config_velo_factory.unwrap_or_else(Address::zero); // Corrected field
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `allow_submission_zero_profit` on type `&Config`
   --> bot/src/transaction.rs:197:66
    |
197 |     if min_profit_threshold_for_check == U256::zero() && !config.allow_submission_zero_profit.unwrap_or(false) { 
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `submission_gas_limit_default` on type `&Config`
   --> bot/src/transaction.rs:252:34
    |
252 |     tx_request.gas = Some(config.submission_gas_limit_default.unwrap_or(GAS_LIMIT_DEFAULT).into()); 
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `submission_gas_price_gwei_fixed` on type `&Config`
   --> bot/src/transaction.rs:257:51
    |
257 |     if let Some(gas_price_override_gwei) = config.submission_gas_price_gwei_fixed { 
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `submission_timeout_duration_seconds` on type `&Config`
   --> bot/src/transaction.rs:270:46
    |
270 |     match timeout(Duration::from_secs(config.submission_timeout_duration_seconds.unwrap_or(60)), submit_sequentially( config, client.prov...
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `submission_timeout_duration_seconds` on type `&Config`
   --> bot/src/transaction.rs:296:81
    |
296 |             error!("Transaction submission timed out after {} seconds.", config.submission_timeout_duration_seconds.unwrap_or(60)); 
    |                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `transaction_relay_urls` on type `&Config`
   --> bot/src/transaction.rs:312:36
    |
312 |     let configured_relays = config.transaction_relay_urls.clone().unwrap_or_default(); 
    |                                    ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `profit_sharing_bps_for_devs` on type `&Config`
   --> bot/src/transaction.rs:144:48
    |
144 |     let profit_sharing_percentage_val = config.profit_sharing_bps_for_devs.unwrap_or(0); 
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

error[E0609]: no field `min_flat_profit_weth_threshold` on type `&Config`
   --> bot/src/transaction.rs:148:43
    |
148 |     let min_flat_profit_weth_val = config.min_flat_profit_weth_threshold.unwrap_or(0.0001); 
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `ws_rpc_url`, `http_rpc_url`, `local_private_key`, `chain_id`, `arb_executor_address` ... and 29 others

Some errors have detailed explanations: E0061, E0308, E0432, E0433, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `ulp1_5` (lib) generated 2 warnings
error: could not compile `ulp1_5` (lib) due to 40 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `ulp1_5` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `ulp1_5` (lib test) due to 40 previous errors; 2 warnings emitted

🛑 Shutting down anvil (pid 8568)…
