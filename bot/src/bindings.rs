// bot/src/bindings.rs
#![allow(clippy::all)]
//! Contract bindings generated by `ethers::prelude::abigen`.

use ethers::contract::abigen;

// CRITICAL: Ensure these ABI files exist at ./abis/ relative to the project root
// where cargo build/test is executed. The error "File does not exist" is the
// primary blocker for generating any bindings.

abigen!(
    IUniswapV3Pool,
    "./abis/IUniswapV3Pool.json", // CRITICAL: This file must exist here.
    event_derives(serde::Deserialize, serde::Serialize),
    event_aliases { Swap(IUniswapV3PoolSwap); } // Corrected syntax
);

abigen!(
    UniswapV3Pool,
    "./abis/UniswapV3Pool.json", 
    event_derives(serde::Deserialize, serde::Serialize),
    event_aliases { Swap(UniswapV3PoolSwap); } // Corrected syntax
);

abigen!(
    QuoterV2, 
    "./abis/QuoterV2.json", 
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    VelodromeRouter, 
    "./abis/VelodromeRouter.json", 
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    VelodromeV2Pool,
    "./abis/VelodromeV2Pool.json", 
    event_derives(serde::Deserialize, serde::Serialize),
    event_aliases { Swap(VelodromeV2PoolSwap); } // Corrected syntax
);

abigen!(
    AerodromePool,
    "./abis/AerodromePool.json", // CRITICAL: This file must exist here.
    event_derives(serde::Deserialize, serde::Serialize),
    event_aliases { Swap(AerodromePoolSwap); } // Corrected syntax
);

abigen!(
    BalancerVault,
    "./abis/BalancerVault.json", 
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    ArbitrageExecutor,
    "./abis/ArbitrageExecutor.json", 
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    IUniswapV3Factory, 
    "./abis/IUniswapV3Factory.json", 
    event_derives(serde::Deserialize, serde::Serialize),
    event_aliases { PoolCreated(IUniswapV3FactoryPoolCreated); } // Corrected syntax
);

abigen!(
    IVelodromeFactory, 
    "./abis/IVelodromeFactory.json", 
    event_derives(serde::Deserialize, serde::Serialize),
    event_aliases { PoolCreated(IVelodromeFactoryPoolCreated); } // Corrected syntax
);

// The explicit `pub mod` declarations were causing redefinition errors (E0428)
// because `abigen!` itself often defines a module or makes the types directly available.
// These have been removed.
// Imports in other files should now look like:
// `use crate::bindings::ContractName;`
// or `use crate::bindings::ContractName::EventName;`
// or `use crate::bindings::contract_name_module::ContractName;` if abigen creates a module.

// For unresolved imports like `self::velodrome_v2_pool::VelodromeV2Pool`:
// If `abigen!(VelodromeV2Pool, ...)` makes `VelodromeV2Pool` struct directly available in `crate::bindings`,
// then `pub use self::VelodromeV2Pool;` is not needed, and other files can use `crate::bindings::VelodromeV2Pool`.
// The alias `VelodromePair` above handles this for `VelodromeV2Pool`.
// Similar logic applies to UniswapV3Pool, ArbitrageExecutor, BalancerVault.
// The E0432 errors for these suggest that `abigen!` makes them directly available,
// and the `pub use self::module_name::StructName` pattern was incorrect because `module_name` didn't exist as such.

// END OF FILE: bot/src/bindings.rs