// bot/src/bindings.rs
#![allow(clippy::all)]
//! Contract bindings generated by `ethers::prelude::abigen`.

use ethers::prelude::abigen;

// --- Uniswap V3 ---
abigen!(
    UniswapV3Pool,
    "./abis/UniswapV3Pool.json",
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    IUniswapV3Factory,
    "./abis/IUniswapV3Factory.json",
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    QuoterV2,
    "./abis/QuoterV2.json",
    event_derives(serde::Deserialize, serde::Serialize)
);


// --- Velodrome V2 (Optimism) ---
abigen!(
    VelodromeV2Pool,
    "./abis/VelodromeV2Pool.json",
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    VelodromeRouter, // Consider renaming to VelodromeV2Router for clarity if needed
    "./abis/VelodromeRouter.json",
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    IVelodromeFactory, // Consider renaming to IVelodromeV2Factory
    "./abis/IVelodromeFactory.json",
    event_derives(serde::Deserialize, serde::Serialize)
);


// --- Aerodrome Finance (Base) - Reuse Velodrome ABIs ---
// Generate separate Rust types for Aerodrome using the Velo V2 ABI file.
// This assumes the relevant functions/events (getReserves, Swap, tokens, stable, etc.)
// have the same signatures.
abigen!(
    AerodromePool, // New Rust struct name for Aerodrome pools
    "./abis/VelodromeV2Pool.json", // Reusing the Velo Pool ABI
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    AerodromeRouter, // New Rust struct name for Aerodrome Router
    "./abis/VelodromeRouter.json", // Reusing the Velo Router ABI
    event_derives(serde::Deserialize, serde::Serialize)
);

abigen!(
    IAerodromeFactory, // New Rust struct name for Aerodrome Factory interface
    "./abis/IVelodromeFactory.json", // Reusing the Velo Factory ABI
    event_derives(serde::Deserialize, serde::Serialize)
);
// --- TODO: Add Bindings for Ramses (Arbitrum) when implementing ---


// --- Shared/Utility Contracts ---
abigen!(
    BalancerVault,
    "./abis/BalancerVault.json",
    event_derives(serde::Deserialize, serde::Serialize)
);

// Generic ERC20 interface with common functions
abigen!(
    IERC20,
    r#"[
        event Approval(address indexed owner, address indexed spender, uint256 value)
        event Transfer(address indexed from, address indexed to, uint256 value)
        function approve(address spender, uint256 amount) external returns (bool)
        function balanceOf(address account) external view returns (uint256)
        function decimals() external view returns (uint8)
        function symbol() external view returns (string)
        function name() external view returns (string)
        function totalSupply() external view returns (uint256)
        function allowance(address owner, address spender) external view returns (uint256)
        function transfer(address to, uint256 amount) external returns (bool)
        function transferFrom(address from, address to, uint256 amount) external returns (bool)
    ]"#,
    event_derives(serde::Deserialize, serde::Serialize)
);

// Minimal interface for the Huff executor (e.g., for owner functions if needed)
abigen!(
    ArbitrageExecutor,
    "./abis/ArbitrageExecutor.json", // Contains only withdrawToken for now
    event_derives(serde::Deserialize, serde::Serialize)
);


// END OF FILE: bot/src/bindings.rs