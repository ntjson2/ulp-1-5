// @version 0.8.0
// File: FlashExecutor.huff
// Purpose: Execute a flash loan via Balancer V4 and perform a 404-compatible token swap.
// Structure: This contract assumes a calldata layout of:
// [0x00 - 0x20] => token address (ERC-404)
// [0x20 - 0x40] => loan amount
// [0x40 - 0x60] => NFT tokenId (used for identifying position or repayment collateral)
// [0x60 - 0x80] => DEX 1 address (Uniswap V5 style)
// [0x80 - 0xA0] => DEX 2 address (Balancer V4, or other secondary)

// ─────────────────────────────────────────────────────────────────────────────
// CONSTANT MACROS
// ─────────────────────────────────────────────────────────────────────────────

/// @notice Balancer V4 Vault address (hardcoded).
/// @returns The 20-byte address of the Balancer V4 vault as a literal.
#define macro BALANCER_VAULT_V4() = takes(0) returns(1) {
    0xBA12222222228d8Ba445958a75a0704d566BF2C9
}

// ─────────────────────────────────────────────────────────────────────────────
// MAIN EXECUTION MACRO: FLASH_LOAN_404
// ─────────────────────────────────────────────────────────────────────────────

/// @notice Executes the Balancer flash loan + dual-dex 404 token swap.
/// @dev Calls Balancer V4 Vault, performs token swap using ERC-404 transfer logic,
///      and attempts NFT-collateral-based repayment.
/// @param calldata layout explained above.
#define macro FLASH_LOAN_404() = takes(0) returns(0) {
    // Load token address from calldata [0x00 - 0x20]
    0x04 calldataload

    // Load loan amount [0x20 - 0x40]
    0x24 calldataload

    // Load tokenId for NFT-based collateral tracking [0x40 - 0x60]
    0x44 calldataload

    // Push Balancer Vault address onto the stack
    BALANCER_VAULT_V4()

    // Push remaining gas for the call (as per EVM convention)
    gas

    // Call Balancer to receive flash loan
    call

    // Load first DEX address for swap path 1 [0x60 - 0x80]
    0x64 calldataload

    // Load second DEX address for swap path 2 [0x80 - 0xA0]
    0x84 calldataload

    // Perform 404-compliant token swap between the two DEXs
    __SWAP_404()

    // Final repayment logic using NFT-based collateral
    BALANCER_VAULT_V4()   // Target = Balancer Vault
    0x00                  // Input offset (not used)
    0x00                  // Input size
    0x00                  // Output size (don't expect return)
    gas
    call
}

// ─────────────────────────────────────────────────────────────────────────────
// INTERNAL MACRO: __SWAP_404
// ─────────────────────────────────────────────────────────────────────────────

/// @notice Performs a swap of ERC-404 tokens between two DEXs using `transfer()`
/// @dev Uses the ERC20 `transfer` selector `0xa9059cbb`
///      Assumes `swap1` and `swap2` are already on the stack (as args)
#define macro __SWAP_404() = takes(2) returns(0) {
    0xa9059cbb              // Function selector for `transfer(address,uint256)`
    0x00 mstore             // Store selector at memory[0x00]
    swap1 0x20 mstore       // Store recipient address at memory[0x20]
    swap2 0x40 mstore       // Store amount at memory[0x40]
    0x60 0x00 call          // Call with input = 0x60 bytes, no output
}
