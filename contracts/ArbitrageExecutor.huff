// File: ArbitrageExecutor.huff
// Version: 1.1.4 (Compatibility fix - move size defines outside macros)
// Purpose: Gas-optimized Uniswap V3 2-way arbitrage executor for Balancer V2 flash loans.

// =======================================================
// Imports & Constants
// =======================================================

// Function Selectors
#define constant APPROVE_SELECTOR = 0x095ea7b3
#define constant SWAP_SELECTOR = 0x022c0d9f
#define constant TRANSFER_SELECTOR = 0xa9059cbb
#define constant BALANCE_OF_SELECTOR = 0x70a08231 // Needed for withdrawal check

// Flash Loan Related Constants
#define constant RECEIVE_FLASH_LOAN_SELECTOR = 0xf3f18ace
#define constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C9 // Balancer V2 Vault
#define constant RECEIVE_FLASH_LOAN_RETURN_VALUE = 0xa157427a8d45e187257fa91ff98f73367a3e04075e180055503bf726067157a9 // keccak256("ERC3156FlashBorrower.onFlashLoan")

// Uniswap V3 Callback Selector
#define constant UNISWAP_V3_SWAP_CALLBACK_SELECTOR = 0xfa461e33

// TickMath constants for sqrtPriceLimitX96
#define constant MIN_SQRT_RATIO = 0x4295128739
#define constant MAX_SQRT_RATIO = 0x1461446703485210103287273052203988822378723970342

// Withdrawal Function Selector
#define constant WITHDRAW_TOKEN_SELECTOR = 0x01e3b41a // Simplified selector for withdrawToken(address,address)

// Storage Slots (using constants for clarity)
#define constant OWNER_SLOT = 0x00 // Slot 0 for owner address

// Memory Pointers / Layout Markers
#define constant MEM_TEMP_SPACE_START = 0x00   // General scratch space
#define constant MEM_RECEIVED_AMOUNT_SLOT = 0x60 // Temp storage for amount received in callback
#define constant MEM_CALLBACK_DATA_START = 0x80  // Buffer for callback data (token0, token1)
#define constant MEM_EXTERNAL_CALL_BUFFER = 0x100 // Buffer for swap/approve/balanceOf calldata

// Call Data Sizes (Moved to global scope)
#define constant SWAP1_CALLDATA_SIZE = 0x104
#define constant SWAP2_CALLDATA_SIZE = 0x104
#define constant APPROVE_CALLDATA_SIZE = 0x44
#define constant WITHDRAW_BALANCEOF_SIZE = 0x24
#define constant WITHDRAW_TRANSFER_SIZE = 0x44

// =======================================================
// Interface Definitions (Commented Out for compatibility)
// =======================================================
// #define function receiveFlashLoan(address[],uint256[],uint256[],bytes) view returns (bytes32)
// #define function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data) nonpayable
// #define function withdrawToken(address token, address recipient) nonpayable

// =======================================================
// Constructor Macro (Sets Immutable Owner)
// =======================================================
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    caller [OWNER_SLOT] sstore stop
}

// =======================================================
// Uniswap V3 Swap Callback Macro
// =======================================================
#define macro UNISWAP_V3_SWAP_CALLBACK() = takes(0) returns (0) {
    // Load deltas
    0x04 calldataload // [amount0Delta]
    0x24 calldataload // [amount1Delta, amount0Delta]
    dup1 0x00 gt pay_token1 jumpi
    // --- Pay Token 0 ---
    0x00 swap1 sub swap1 [MEM_RECEIVED_AMOUNT_SLOT] mstore // [amount_to_pay]
    0x44 calldataload 0x24 add calldataload // [token0_addr, amount_to_pay]
    [TRANSFER_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    caller [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    [MEM_EXTERNAL_CALL_BUFFER] 0x24 add swap1 mstore // [token0_addr]
    0x00 0x00 0x44 [MEM_EXTERNAL_CALL_BUFFER] 0x00 swap1 gas call iszero revert_if_zero stop
pay_token1:
    [MEM_RECEIVED_AMOUNT_SLOT] mstore // store amount0Delta, stack: [amount1Delta]
    dup1 0x00 gt callback_end jumpi
    // --- Pay Token 1 ---
    0x00 swap1 sub // [amount_to_pay]
    0x44 calldataload 0x24 add 0x20 add calldataload // [token1_addr, amount_to_pay]
    [TRANSFER_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    caller [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    [MEM_EXTERNAL_CALL_BUFFER] 0x24 add swap1 mstore // [token1_addr]
    0x00 0x00 0x44 [MEM_EXTERNAL_CALL_BUFFER] 0x00 swap1 gas call iszero revert_if_zero
callback_end:
    stop
revert_if_zero:
    iszero iszero jumpi 0x00 0x00 revert
}

// =======================================================
// Flash Loan Receiver Macro
// =======================================================
#define macro RECEIVE_FLASH_LOAN() = takes(0) returns (0) {
    // --- 1. Load Loan Parameters & User Data ---
    0x24 calldataload 0x20 add calldataload 0x00 mstore // loan_amount
    0x44 calldataload 0x20 add calldataload 0x20 mstore // fee_amount
    0x04 calldataload 0x20 add calldataload 0x40 mstore // token0
    0x64 calldataload dup1 0x24 add calldataload dup1 0x44 add calldataload swap1 pop dup1 0x64 add calldataload swap1 pop dup1 0x84 add calldataload swap1 pop pop
    // Stack: [zeroForOne_swap1, token1, pool_B, pool_A]

    // --- 2. Perform Swap 1 ---
    dup1 iszero set_min_sqrt1 jumpi [MAX_SQRT_RATIO] sqrt_limit_set1 jump set_min_sqrt1: [MIN_SQRT_RATIO] 0x01 add sqrt_limit_set1:
    // Stack: [sqrt_limit, zeroForOne_swap1, token1, pool_B, pool_A]
    0x40 mload [MEM_CALLBACK_DATA_START] mstore dup3 [MEM_CALLBACK_DATA_START] 0x20 add mstore
    // Prepare calldata
    [SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    [MEM_EXTERNAL_CALL_BUFFER] 0x24 add dup2 mstore // zeroForOne flag
    0x00 mload [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore // amountSpecified
    [MEM_EXTERNAL_CALL_BUFFER] 0x64 add swap1 mstore // sqrtPriceLimit
    0xA0 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore // Callback data offset
    0x40 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore // Callback data Length
    [MEM_CALLBACK_DATA_START] mload [MEM_EXTERNAL_CALL_BUFFER] 0xC4 add mstore
    [MEM_CALLBACK_DATA_START] 0x20 add mload [MEM_EXTERNAL_CALL_BUFFER] 0xE4 add mstore
    // Execute swap1
    swap3 // [pool_A, token1, pool_B, zeroForOne_swap1]
    0x00 0x00 [SWAP1_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00 swap1 gas call iszero revert_if_zero
    // Stack: [token1, pool_B, zeroForOne_swap1]

    // --- 3. Perform Swap 2 ---
    iszero // [zeroForOne_swap2, token1, pool_B]
    dup1 iszero set_min_sqrt2 jumpi [MAX_SQRT_RATIO] sqrt_limit_set2 jump set_min_sqrt2: [MIN_SQRT_RATIO] 0x01 add sqrt_limit_set2:
    // Stack: [sqrt_limit2, zeroForOne_swap2, token1, pool_B]
    // Prepare calldata
    [SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    [MEM_EXTERNAL_CALL_BUFFER] 0x24 add dup2 mstore // zeroForOne_swap2 flag
    [MEM_RECEIVED_AMOUNT_SLOT] mload [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore // amountSpecified
    [MEM_EXTERNAL_CALL_BUFFER] 0x64 add swap1 mstore // sqrtPriceLimit2
    0xA0 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore // Callback data offset
    // Execute swap2
    swap2 // [pool_B, token1, zeroForOne_swap2]
    0x00 0x00 [SWAP2_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00 swap1 gas call iszero revert_if_zero
    // Stack: [token1, zeroForOne_swap2] -> Pop these, no longer needed
    pop pop

    // --- 4. Approve Balancer Vault ---
    0x20 mload 0x00 mload add // [repayment_amount]
    [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    [BALANCER_VAULT] [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    [MEM_EXTERNAL_CALL_BUFFER] 0x24 add swap1 mstore // repayment_amount
    0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00 0x40 mload gas call iszero revert_if_zero

    // --- 5. Final Return ---
    [RECEIVE_FLASH_LOAN_RETURN_VALUE] [MEM_TEMP_SPACE_START] mstore
    0x20 [MEM_TEMP_SPACE_START] return
}

// =======================================================
// Profit Withdrawal Macro
// =======================================================
#define macro WITHDRAW_TOKEN() = takes(0) returns (0) {
    caller [OWNER_SLOT] sload eq is_owner jumpi 0x00 0x00 revert is_owner:
    // Load params
    0x04 calldataload // [token_addr]
    0x24 calldataload // [recipient_addr, token_addr]
    // Get balance
    [BALANCE_OF_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    0x20 [MEM_TEMP_SPACE_START] [WITHDRAW_BALANCEOF_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00 dup3 staticcall iszero revert_if_zero
    // Stack: [recipient_addr, token_addr]
    [MEM_TEMP_SPACE_START] mload // [balance, recipient_addr, token_addr]
    // Transfer balance
    [TRANSFER_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    swap1 swap2 // [token_addr, balance, recipient_addr]
    [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore // recipient
    swap1 [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore // balance
    0x00 0x00 [WITHDRAW_TRANSFER_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00 swap1 gas call iszero revert_if_zero
    stop
}

// =======================================================
// Main Dispatcher Macro (Contract Entry Point)
// =======================================================
#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 [RECEIVE_FLASH_LOAN_SELECTOR] eq receive_flash_loan jumpi
    dup1 [UNISWAP_V3_SWAP_CALLBACK_SELECTOR] eq swap_callback jumpi
    dup1 [WITHDRAW_TOKEN_SELECTOR] eq withdraw_token jumpi
    0x00 0x00 revert
receive_flash_loan: RECEIVE_FLASH_LOAN()
swap_callback: UNISWAP_V3_SWAP_CALLBACK()
withdraw_token: WITHDRAW_TOKEN()
}