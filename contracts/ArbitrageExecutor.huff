// File: ArbitrageExecutor.huff
// Version: 2.3.0 (Added Salt Nonce Guard)
// Purpose: Gas-optimized Cross-DEX (UniV3/VeloV2) 2-way arbitrage executor
//          with on-chain MINIMUM profit check, salt nonce guard, and debug logging.

// =======================================================
// Imports & Constants
// =======================================================

// Function Selectors
#define constant APPROVE_SELECTOR = 0x095ea7b3
#define constant TRANSFER_SELECTOR = 0xa9059cbb
#define constant BALANCE_OF_SELECTOR = 0x70a08231
#define constant UNISWAP_V3_SWAP_SELECTOR = 0x022c0d9f
#define constant VELODROME_SWAP_SELECTOR = 0x38ed1739
#define constant RECEIVE_FLASH_LOAN_SELECTOR = 0xf3f18ace
#define constant UNISWAP_V3_SWAP_CALLBACK_SELECTOR = 0xfa461e33
#define constant WITHDRAW_TOKEN_SELECTOR = 0x01e3b41a

// Addresses
#define constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C9

// Return Value
#define constant RECEIVE_FLASH_LOAN_RETURN_VALUE = 0xa157427a8d45e187257fa91ff98f73367a3e04075e180055503bf726067157a9

// UniV3 Constants
#define constant MIN_SQRT_RATIO = 0x4295128739
#define constant MAX_SQRT_RATIO = 0x1461446703485210103287273052203988822378723970342

// Storage Slots
#define constant OWNER_SLOT = 0x00
#define constant SALT_SEEN_MAPPING_SLOT = 0x01 // Base slot for mapping(uint256 => uint256)

// Memory Pointers / Layout
#define constant MEM_TEMP_SPACE_START = 0x00    // General temp space for return data etc.
#define constant MEM_LOAN_AMOUNT = 0x00         // Location within temp space (reused)
#define constant MEM_FEE_AMOUNT = 0x20          // Location within temp space (reused)
#define constant MEM_TOKEN0_ADDR = 0x40        // Loan token addr (persistent location)
#define constant MEM_RECEIVED_AMOUNT_SLOT = 0x60 // Stores amount received from Swap1
#define constant MEM_CALLBACK_DATA_START = 0x80 // Buffer for UniV3 callback data
#define constant MEM_PATH_ARRAY_START = 0xC0    // Buffer for Velo path array
#define constant MEM_FINAL_BALANCE_SLOT = 0xE0  // Temp storage for final balance check
#define constant MEM_MIN_PROFIT_SLOT = 0x100    // Stores minProfitWei from userData
#define constant MEM_SALT_SLOT = 0x120          // **NEW**: Stores salt from userData
#define constant MEM_KECCAK_INPUT_START = 0x140 // **NEW**: Temp space for keccak input
#define constant MEM_EXTERNAL_CALL_BUFFER = 0x180 // **SHIFTED**: Main buffer for external calls

// Call Data Sizes
#define constant UNISWAP_SWAP_CALLDATA_SIZE = 0xA4 // Adjusted size for 5 args + offset/len
#define constant VELODROME_SWAP_CALLDATA_SIZE = 0x84 // Adjusted size for 4 args + offset/len
#define constant APPROVE_CALLDATA_SIZE = 0x44
#define constant BALANCEOF_CALLDATA_SIZE = 0x24
#define constant TRANSFER_CALLDATA_SIZE = 0x44
#define constant WITHDRAW_BALANCEOF_SIZE = 0x24
#define constant WITHDRAW_TRANSFER_SIZE = 0x44

// Debug Logging Topic
#define constant DEBUG_LOG_TOPIC = 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd

// =======================================================
// Macros
// =======================================================
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    caller           // [sender]
    [OWNER_SLOT]     // [OWNER_SLOT, sender]
    sstore           // []
    stop
}

#define macro UNISWAP_V3_SWAP_CALLBACK() = takes(0) returns (0) {
    push4 0xfa461e33 // Push literal selector
    0x00 calldataload 0xE0 shr // Get function selector from calldata
    eq is_callback jump // If selector matches, continue (do nothing)
    0x00 0x00 revert
    is_callback:
    stop
}

#define macro PREPARE_VELO_PATH() = takes(2) returns(0) {
    dup1  // [token1, token0, token1]
    [MEM_PATH_ARRAY_START] 0x20 add mstore // Store token1 at offset 0xE0 (to)
    swap1 // [token0, token1]
    [MEM_PATH_ARRAY_START] mstore  // Store token0 at offset 0xC0 (from)
    0x00  // [0]
    [MEM_PATH_ARRAY_START] 0x40 add mstore // Store 0 at offset 0x100 (stable)
    0x00  // [0]
    [MEM_PATH_ARRAY_START] 0x60 add mstore // Store 0 at offset 0x120 (factory)
}


// =======================================================
// Flash Loan Receiver Macro
// =======================================================
#define macro RECEIVE_FLASH_LOAN() = takes(0) returns (0) {

    // --- 1. Load Loan Parameters & User Data ---
    0x44 calldataload calldataload [MEM_LOAN_AMOUNT] mstore
    0x00 [MEM_FEE_AMOUNT] mstore
    0x24 calldataload calldataload [MEM_TOKEN0_ADDR] mstore

    0x64 calldataload // userData_ptr offset on stack
    dup1 0x100 add calldataload [MEM_SALT_SLOT] mstore
    dup1 0xE0 add calldataload [MEM_MIN_PROFIT_SLOT] mstore

    // --- 1b. Salt Nonce Guard ---
    [MEM_SALT_SLOT] mload
    [MEM_KECCAK_INPUT_START] mstore
    [SALT_SEEN_MAPPING_SLOT]
    [MEM_KECCAK_INPUT_START] 0x20 add mstore
    [MEM_KECCAK_INPUT_START] 0x40
    // FIX: Use keccak256 HEX OPCODE value 0x20
    0x20                            // [storage_key] <- KECCAK256 opcode
    dup1 sload iszero iszero
    revert_if_salt_seen jumpi
    push1 0x01 sstore // Mark as seen. Clears stack.

    // --- Log Entry Point & Loan Amount ---
    [MEM_LOAN_AMOUNT] mload [DEBUG_LOG_TOPIC] log1 // Stack: []

    // --- Prepare for Swaps (Load necessary params from calldata/memory) ---
    0x64 calldataload // userDataPtr
    dup1 0xC0 add calldataload swap1 // vr
    dup1 0xA0 add calldataload swap1 // isB
    dup1 0x80 add calldataload swap1 // isA
    dup1 0x60 add calldataload swap1 // zfoA
    dup1 0x40 add calldataload swap1 // t1
    dup1 0x20 add calldataload swap1 // pB
                 calldataload swap1 // pA
    pop // remove userDataPtr
    // Stack: [pA, pB, t1, zfoA, isA, isB, vr]

    // --- 2. Perform Swap 1 (Buy) ---
    dup5 iszero swap1_uni_v3 jumpi

    // --- Swap 1 Velo/Aero ---
    0x00 0x00 address 0x00
    [VELODROME_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
    swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
    push1 0x84 [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
    0x00 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
    [MEM_LOAN_AMOUNT] mload
    [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xA0 add mstore
    dup7 // pA
    [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
    dup2 // loanAmt
    [MEM_EXTERNAL_CALL_BUFFER] 0xC4 add mstore
    0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xA0 add 0x00
    [MEM_TOKEN0_ADDR] mload gas call iszero revert_if_zero
    0x00 0x00 [VELODROME_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    dup1 // pA
    gas call iszero revert_if_zero
    swap1_end jump

    swap1_uni_v3:
    address dup2 [MEM_LOAN_AMOUNT] mload dup3 iszero swap1_uni_limit_max jumpi
    [MIN_SQRT_RATIO] swap1_uni_limit_end jump
    swap1_uni_limit_max: [MAX_SQRT_RATIO]
    swap1_uni_limit_end:
    0x00 [UNISWAP_V3_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    swap1 swap2 swap3 swap4 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    swap1 swap2 swap3       [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
    swap1 swap2             [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
    swap1                   [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
    push1 0xA4 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
    0x00 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
    [MEM_LOAN_AMOUNT] mload [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add mstore
    dup7 [MEM_EXTERNAL_CALL_BUFFER] 0xD4 add mstore
    dup2 [MEM_EXTERNAL_CALL_BUFFER] 0xF4 add mstore
    0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add 0x00
    [MEM_TOKEN0_ADDR] mload gas call iszero revert_if_zero
    0x00 0x00 [UNISWAP_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    dup1 gas call iszero revert_if_zero
    swap1_end jump

    swap1_end:
    [BALANCE_OF_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    0x20 [MEM_RECEIVED_AMOUNT_SLOT] [BALANCEOF_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    dup3 gas staticcall iszero revert_if_zero
    [MEM_RECEIVED_AMOUNT_SLOT] mload [DEBUG_LOG_TOPIC] log1
    [MEM_RECEIVED_AMOUNT_SLOT] mload dup3 dup5 [MEM_TOKEN0_ADDR] mload dup8 dup9
    swap6 pop pop pop pop pop pop
    dup2 iszero swap2_uni_v3 jumpi

    // --- Swap 2 Velo/Aero ---
    0x00 0x00 address 0x00
    [VELODROME_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
    swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
    push1 0x84 [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
    0x00 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
    dup6 [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xA0 add mstore
    dup6 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
    dup2 [MEM_EXTERNAL_CALL_BUFFER] 0xC4 add mstore
    0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xA0 add 0x00
    dup4 gas call iszero revert_if_zero
    0x00 0x00 [VELODROME_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    dup4 gas call iszero revert_if_zero
    swap2_end jump

    swap2_uni_v3:
    address 0x64 calldataload 0x60 add calldataload iszero
    dup7 dup2 iszero swap2_uni_limit_max jumpi
    [MIN_SQRT_RATIO] swap2_uni_limit_end jump
    swap2_uni_limit_max: [MAX_SQRT_RATIO]
    swap2_uni_limit_end:
    0x00 [UNISWAP_V3_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    swap1 swap2 swap3 swap4 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    swap1 swap2 swap3       [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
    swap1 swap2             [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
    swap1                   [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
    push1 0xA4 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
    0x00 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
    dup7 [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add mstore
    dup7 [MEM_EXTERNAL_CALL_BUFFER] 0xD4 add mstore
    dup2 [MEM_EXTERNAL_CALL_BUFFER] 0xF4 add mstore
    0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add 0x00
    dup6 gas call iszero revert_if_zero
    0x00 0x00 [UNISWAP_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    dup4 gas call iszero revert_if_zero

    swap2_end:
    pop pop pop pop pop
    [BALANCE_OF_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    0x20 [MEM_FINAL_BALANCE_SLOT] [BALANCEOF_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    [MEM_TOKEN0_ADDR] mload gas staticcall iszero revert_if_zero
    [MEM_FINAL_BALANCE_SLOT] mload [MEM_FEE_AMOUNT] mload [MEM_LOAN_AMOUNT] mload add [MEM_MIN_PROFIT_SLOT] mload add
    dup1 [DEBUG_LOG_TOPIC] log1 dup2 [DEBUG_LOG_TOPIC] log1
    dup1 swap2 lt revert_if_unprofitable jumpi
    [MEM_FEE_AMOUNT] mload [MEM_LOAN_AMOUNT] mload add
    [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
    [BALANCER_VAULT] [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
    dup1 [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
    0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
    [MEM_TOKEN0_ADDR] mload gas call iszero revert_if_zero
    [RECEIVE_FLASH_LOAN_RETURN_VALUE] [MEM_TEMP_SPACE_START] mstore
    0x20 [MEM_TEMP_SPACE_START] return

// --- Jump Destinations ---
revert_if_salt_seen: 0x00 0x00 revert
revert_if_unprofitable: [MEM_FINAL_BALANCE_SLOT] mload [DEBUG_LOG_TOPIC] log1 0x00 0x00 revert
revert_if_zero: 0x00 0x00 revert
}


// =======================================================
// Profit Withdrawal Macro
// =======================================================
#define macro WITHDRAW_TOKEN() = takes(0) returns (0) {
    caller [OWNER_SLOT] sload eq is_owner jump
    0x00 0x00 revert
    // is_owner label is defined globally in MAIN
}

// =======================================================
// Main Dispatcher Macro
// =======================================================
#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 [RECEIVE_FLASH_LOAN_SELECTOR] eq receive_flash_loan jump
    dup1 [UNISWAP_V3_SWAP_CALLBACK_SELECTOR] eq uniswap_callback jump
    dup1 [WITHDRAW_TOKEN_SELECTOR] eq withdraw_token jump
    0x00 0x00 revert

    receive_flash_loan:
        RECEIVE_FLASH_LOAN()
        stop

    uniswap_callback:
        UNISWAP_V3_SWAP_CALLBACK()
        stop

    withdraw_token:
        WITHDRAW_TOKEN() // Jumps to is_owner label below
        stop // Should be unreachable

    // --- Global Jump Destinations ---
    revert_if_zero: 0x00 0x00 revert
    is_callback: stop
    is_owner:
        0x04 calldataload 0x24 calldataload
        [BALANCE_OF_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        0x20 [MEM_TEMP_SPACE_START] [WITHDRAW_BALANCEOF_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        dup1 gas staticcall iszero revert_if_zero
        [TRANSFER_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        swap1 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        [MEM_TEMP_SPACE_START] mload [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
        0x00 0x00 [WITHDRAW_TRANSFER_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        swap1 gas call iszero revert_if_zero
        0x00 0x00 return
    revert_if_salt_seen: 0x00 0x00 revert
    revert_if_unprofitable: [MEM_FINAL_BALANCE_SLOT] mload [DEBUG_LOG_TOPIC] log1 0x00 0x00 revert

    // Labels from RECEIVE_FLASH_LOAN macro must be defined globally
    swap1_uni_v3:
        address dup2 [MEM_LOAN_AMOUNT] mload dup3 iszero swap1_uni_limit_max jumpi
        [MIN_SQRT_RATIO] swap1_uni_limit_end jump
    swap1_uni_limit_max: [MAX_SQRT_RATIO]
    swap1_uni_limit_end:
        0x00 [UNISWAP_V3_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        swap1 swap2 swap3 swap4 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        swap1 swap2 swap3       [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
        swap1 swap2             [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
        swap1                   [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
        push1 0xA4 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
        0x00 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
        [MEM_LOAN_AMOUNT] mload [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add mstore
        dup7 [MEM_EXTERNAL_CALL_BUFFER] 0xD4 add mstore
        dup2 [MEM_EXTERNAL_CALL_BUFFER] 0xF4 add mstore
        0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add 0x00
        [MEM_TOKEN0_ADDR] mload gas call iszero revert_if_zero
        0x00 0x00 [UNISWAP_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        dup1 gas call iszero revert_if_zero
        swap1_end jump

    swap1_end:
        [BALANCE_OF_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        0x20 [MEM_RECEIVED_AMOUNT_SLOT] [BALANCEOF_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        dup3 gas staticcall iszero revert_if_zero
        [MEM_RECEIVED_AMOUNT_SLOT] mload [DEBUG_LOG_TOPIC] log1
        [MEM_RECEIVED_AMOUNT_SLOT] mload dup3 dup5 [MEM_TOKEN0_ADDR] mload dup8 dup9
        swap6 pop pop pop pop pop pop
        dup2 iszero swap2_uni_v3 jumpi
        0x00 0x00 address 0x00
        [VELODROME_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
        swap1 swap2 [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
        push1 0x84 [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
        0x00 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
        dup6 [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xA0 add mstore
        dup6 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
        dup2 [MEM_EXTERNAL_CALL_BUFFER] 0xC4 add mstore
        0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xA0 add 0x00
        dup4 gas call iszero revert_if_zero
        0x00 0x00 [VELODROME_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        dup4 gas call iszero revert_if_zero
        swap2_end jump

    swap2_uni_v3:
        address 0x64 calldataload 0x60 add calldataload iszero
        dup7 dup2 iszero swap2_uni_limit_max jumpi
        [MIN_SQRT_RATIO] swap2_uni_limit_end jump
    swap2_uni_limit_max: [MAX_SQRT_RATIO]
    swap2_uni_limit_end:
        0x00 [UNISWAP_V3_SWAP_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        swap1 swap2 swap3 swap4 [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        swap1 swap2 swap3       [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
        swap1 swap2             [MEM_EXTERNAL_CALL_BUFFER] 0x44 add mstore
        swap1                   [MEM_EXTERNAL_CALL_BUFFER] 0x64 add mstore
        push1 0xA4 [MEM_EXTERNAL_CALL_BUFFER] 0x84 add mstore
        0x00 [MEM_EXTERNAL_CALL_BUFFER] 0xA4 add mstore
        dup7 [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add mstore
        dup7 [MEM_EXTERNAL_CALL_BUFFER] 0xD4 add mstore
        dup2 [MEM_EXTERNAL_CALL_BUFFER] 0xF4 add mstore
        0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0xD0 add 0x00
        dup6 gas call iszero revert_if_zero
        0x00 0x00 [UNISWAP_SWAP_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        dup4 gas call iszero revert_if_zero

    swap2_end:
        pop pop pop pop pop
        [BALANCE_OF_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        address [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        0x20 [MEM_FINAL_BALANCE_SLOT] [BALANCEOF_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        [MEM_TOKEN0_ADDR] mload gas staticcall iszero revert_if_zero
        [MEM_FINAL_BALANCE_SLOT] mload [MEM_FEE_AMOUNT] mload [MEM_LOAN_AMOUNT] mload add [MEM_MIN_PROFIT_SLOT] mload add
        dup1 [DEBUG_LOG_TOPIC] log1 dup2 [DEBUG_LOG_TOPIC] log1
        dup1 swap2 lt revert_if_unprofitable jumpi
        [MEM_FEE_AMOUNT] mload [MEM_LOAN_AMOUNT] mload add
        [APPROVE_SELECTOR] [MEM_EXTERNAL_CALL_BUFFER] mstore
        [BALANCER_VAULT] [MEM_EXTERNAL_CALL_BUFFER] 0x04 add mstore
        dup1 [MEM_EXTERNAL_CALL_BUFFER] 0x24 add mstore
        0x00 0x00 [APPROVE_CALLDATA_SIZE] [MEM_EXTERNAL_CALL_BUFFER] 0x00
        [MEM_TOKEN0_ADDR] mload gas call iszero revert_if_zero
        [RECEIVE_FLASH_LOAN_RETURN_VALUE] [MEM_TEMP_SPACE_START] mstore
        0x20 [MEM_TEMP_SPACE_START] return

} // End of MAIN macro definition 